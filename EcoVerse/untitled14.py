# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/166_HMnnS_Ozlz6cwdtyK_KyEYXWdCpht
"""

# ==========================
# üöÄ Enhanced Kokoro TTS App with Beautiful CSS
# ==========================

!pip install -q kokoro>=0.9.2 soundfile PyPDF2 python-docx
!apt-get -qq -y install espeak-ng > /dev/null 2>&1

import os, json
import soundfile as sf
import PyPDF2, docx
import ipywidgets as widgets
from IPython.display import display, Audio, HTML, clear_output
from google.colab import files
from kokoro import KPipeline

# ==========================
# üìÇ AUTH SYSTEM
# ==========================
USER_DB = "users.json"

def load_users():
    if os.path.exists(USER_DB):
        with open(USER_DB, "r") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_DB, "w") as f:
        json.dump(users, f)

def signup(username, password):
    users = load_users()
    if username in users:
        return False, "‚ùå Username already exists!"
    users[username] = password
    save_users(users)
    return True, "‚úÖ Account created successfully!"

def login(username, password):
    users = load_users()
    if username in users and users[username] == password:
        return True, "‚úÖ Login successful!"
    return False, "‚ùå Invalid username or password!"

# ==========================
# üé§ ENHANCED KOKORO TTS CLASS
# ==========================
class EnhancedKokoroTTS:
    def __init__(self, lang_code='a', voice='af_heart'):
        self.lang_code = lang_code
        self.voice = voice
        self.pipeline = KPipeline(lang_code=lang_code)
        self.supported_formats = ['.txt', '.pdf', '.docx']

    def set_language(self, lang_code):
        if lang_code != self.lang_code:
            self.lang_code = lang_code
            self.pipeline = KPipeline(lang_code=lang_code)

    def extract_text_from_pdf(self, file_path):
        try:
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                return "\n".join([p.extract_text() for p in pdf_reader.pages])
        except: return None

    def extract_text_from_docx(self, file_path):
        try:
            docx_file = docx.Document(file_path)
            return "\n".join([p.text for p in docx_file.paragraphs])
        except: return None

    def extract_text_from_txt(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except: return None

    def process_uploaded_file(self, file_path):
        ext = os.path.splitext(file_path)[1].lower()
        if ext == '.pdf': return self.extract_text_from_pdf(file_path)
        if ext == '.docx': return self.extract_text_from_docx(file_path)
        if ext == '.txt': return self.extract_text_from_txt(file_path)
        return None

    def chunk_text(self, text, max_length=500):
        sentences = text.replace('\n', ' ').split('. ')
        chunks, current = [], ""
        for s in sentences:
            if len(current) + len(s) + 2 <= max_length:
                current += s + ". "
            else:
                chunks.append(current.strip())
                current = s + ". "
        if current: chunks.append(current.strip())
        return chunks

    def generate_speech(self, text, chunk_size=500):
        if not text.strip(): return
        chunks = self.chunk_text(text, chunk_size)
        all_files = []
        for cidx, chunk in enumerate(chunks):
            try:
                generator = self.pipeline(chunk, voice=self.voice)
                for i, (_, _, audio) in enumerate(generator):
                    fname = f"chunk_{cidx}_{i}.wav"
                    sf.write(fname, audio, 24000)
                    all_files.append(fname)
                    display(Audio(data=audio, rate=24000, autoplay=(cidx==0 and i==0)))
            except Exception as e:
                print("Error:", e)
        return all_files

# ==========================
# üñ•Ô∏è FRONTEND UI
# ==========================
tts = EnhancedKokoroTTS()

def create_input_interface():
    input_method = widgets.RadioButtons(
        options=[('Type text directly', 'text'), ('Upload file (PDF, DOCX, TXT)', 'file')],
        value='text', description='Input:'
    )
    lang_selector = widgets.Dropdown(
        options=[('English', 'a'), ('Spanish', 'es'), ('French', 'fr'),
                 ('German', 'de'), ('Hindi', 'hi'), ('Telugu', 'te')],
        value='a', description='Language:'
    )
    text_input = widgets.Textarea(
        value='', placeholder='Enter text...', description='Text:',
        layout=widgets.Layout(width='100%', height='200px')
    )
    upload_button = widgets.Button(description='üìÇ Upload File', button_style='info')
    process_button = widgets.Button(description='üéµ Generate Speech', button_style='success')
    output_area, file_info, uploaded_files = widgets.Output(), widgets.HTML(value=""), {}

    def on_upload_click(b):
        with output_area:
            clear_output()
            uploaded = files.upload()
            if uploaded:
                filename = list(uploaded.keys())[0]
                uploaded_files['current'] = filename
                file_info.value = f"<b>‚úÖ Uploaded:</b> {filename}"

    def on_process_click(b):
        with output_area:
            clear_output()
            tts.set_language(lang_selector.value)
            if input_method.value == 'text':
                if text_input.value.strip():
                    tts.generate_speech(text_input.value)
                else:
                    print("‚ùå Enter some text!")
            elif input_method.value == 'file':
                if 'current' in uploaded_files:
                    fname = uploaded_files['current']
                    text = tts.process_uploaded_file(fname)
                    if text:
                        tts.generate_speech(text)
                    else:
                        print("‚ùå Could not extract text")
                else:
                    print("‚ùå Upload a file first!")

    upload_button.on_click(on_upload_click)
    process_button.on_click(on_process_click)

    return widgets.VBox([
        widgets.HTML("<h2 class='title'>üé§ Enhanced Kokoro TTS</h2>"),
        lang_selector, input_method,
        text_input, upload_button, file_info,
        process_button, output_area
    ])

# ==========================
# üîê LOGIN UI
# ==========================
def login_ui():
    username = widgets.Text(description="Username:")
    password = widgets.Password(description="Password:")
    status = widgets.HTML(value="")
    login_btn = widgets.Button(description="üîë Login", button_style="success")
    signup_btn = widgets.Button(description="üìù Sign Up", button_style="info")

    def handle_login(b):
        ok, msg = login(username.value, password.value)
        status.value = msg
        if ok:
            clear_output()
            dashboard_ui()

    def handle_signup(b):
        ok, msg = signup(username.value, password.value)
        status.value = msg

    login_btn.on_click(handle_login)
    signup_btn.on_click(handle_signup)

    display(widgets.VBox([
        widgets.HTML("<h2 class='title'>üîê Kokoro TTS Login</h2>"),
        username, password,
        widgets.HBox([login_btn, signup_btn]),
        status
    ]))

def dashboard_ui():
    display(create_input_interface())

# ==========================
# üé® CSS Styling (Glassmorphism)
# ==========================
css = """
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
body { font-family: 'Roboto', sans-serif; background: linear-gradient(135deg,#667eea,#764ba2); color: #fff; text-align:center; }
.widget-label { font-weight:bold; }
h2.title { color:#fff; text-shadow:0 2px 6px rgba(0,0,0,.3); }
.widget-box, .widget-inline-hbox {
    background: rgba(255,255,255,0.15);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding:20px;
    margin:10px auto;
    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
}
button { border-radius: 10px !important; font-weight: bold !important; padding:8px 20px !important; transition: all 0.3s ease !important; }
button:hover { transform: scale(1.05); box-shadow:0 4px 12px rgba(0,0,0,0.3); }
</style>
"""
display(HTML(css))

# ==========================
# üöÄ RUN APP
# ==========================
print("üöÄ Kokoro TTS with Styled Login Ready")
login_ui()